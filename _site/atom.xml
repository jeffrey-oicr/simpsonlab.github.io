<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Simpson Lab Blog</title>
 <link href="simpsonlab.github.io/atom.xml" rel="self"/>
 <link href="simpsonlab.github.io/"/>
 <updated>2015-04-08T09:43:39-04:00</updated>
 <id>simpsonlab.github.io</id>
 <author>
   <name>Jared Simpson</name>
   <email></email>
 </author>

 
 <entry>
   <title>Aligning Nanopore Events to a Reference</title>
   <link href="simpsonlab.github.io/2015/04/08/eventalign/"/>
   <updated>2015-04-08T00:00:00-04:00</updated>
   <id>simpsonlab.github.io/2015/04/08/eventalign</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post describes a new module I added to our &lt;a href=&quot;https://github.com/jts/nanopolish&quot;&gt;nanopolish&lt;/a&gt; software package that aligns the signal data emitted by a nanopore to a reference genome. This is in contrast to most approaches which align two DNA sequences to each other (for example a base-called read and a reference genome). To make sense of what aligning signal data to a reference genome means, I will describe at a high level my model of how nanopore sequencing works. For a more detailed and technical description, see the supplement of our &lt;a href=&quot;http://biorxiv.org/content/early/2015/03/11/015552&quot;&gt;preprint&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nanopore-sequencing&quot;&gt;Nanopore Sequencing&lt;/h2&gt;

&lt;p&gt;A nanopore sequencer threads a single strand of DNA through a pore embedded in a membrane. The pore allows electric current to flow from one side of the membrane to the other. As DNA transits this pore it partially blocks the flow of current, which is measured by the instrument. In Oxford Nanopore’s MinION system the measured current depends on the 5-mer that resides in the pore when the measurements are taken.&lt;/p&gt;

&lt;p&gt;The MinION samples the current thousands of times per second; as 5-mers slide though the pore they should be observed in multiple samples. The MinION’s event detection software processes these samples and tries to detect points where the current level changes. These jumps indicate a new 5-mer resides in the pore. To help illustrate this I’ve reproduced a figure from our preprint below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simulation.svg&quot; alt=&quot;simulation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a simulation from an idealized nanopore sequencing process. The black dots represent the sampled current and the red lines indicate contiguous segments that make up the detected &lt;em&gt;events&lt;/em&gt;. For example the mean current was around 60 picoamps, plus a bit of noise, for the first 0.5s. The current then dropped to 40 pA for 0.1s before jumping to 52 pA and so on.&lt;/p&gt;

&lt;p&gt;The event detection software writes the events to an HDF5 file. The raw kHz samples are typically not stored as the output files would be impractically large. Here’s the table of events for this simulation:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;event index&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;mean (pA)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;length (s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.521&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.112&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;52.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.356&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;54.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.051&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;61.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.291&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;72.7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.015&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;49.4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.141&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To help translate events into a DNA sequence, Oxford Nanopore provides a &lt;em&gt;pore model&lt;/em&gt; which describes the expected current signal for each 5-mer. The pore model is a set of 1024 normal distributions - an example might look like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5-mer&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\mu_k&lt;/script&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\sigma_k&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;AAAAA&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;53.5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;AAAAC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;54.2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;…&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;…&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TTTTG&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;65.3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;TTTTT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;67.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1.4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This indicates that the measured current is expected to be drawn from &lt;script type=&quot;math/tex&quot;&gt;\mathcal{N}(53.5, 1.3^2)&lt;/script&gt; when AAAAA is in the pore and so on.&lt;/p&gt;

&lt;h2 id=&quot;inferring-bases-from-events&quot;&gt;Inferring Bases from Events&lt;/h2&gt;

&lt;p&gt;Using the pore model and the observed data we can solve a number of inference problems. For example we can infer the sequence of nucleotides that passed through the pore. This is the base calling problem. We can also infer the sequence of the genome given a set of overlapping reads. This is the consensus problem, which we addressed in our paper.&lt;/p&gt;

&lt;p&gt;These inference problems are complicated by two important factors. First, the normal distributions for 5-mers overlap. There are 1024 different 5-mers but the signals typically range from about 40-70 pA. This can make it difficult to infer which 5-mer generated a particular event. This is partially mitigated by the structure of the data; a solution must respect the overlap between 5-mers so a position that is difficult to resolve may become clear when we look at subsequent events. Second, event detection is performed in real time and inevitably makes errors. Some events may not be detected if they are too short or if the signals for adjacent 5-mers of the DNA strand are very similar. The extreme case for the latter situation occurs when sequencing through long homopolymers - here we do not expect a detectable change in current. The opposite problem occurs as well. The event detector may split what should be a single event into multiple events due to noise in the system that looks like a change in current. Handling these artefacts is key to accurately inferring the DNA sequence that generated the events.&lt;/p&gt;

&lt;h2 id=&quot;aligning-events-to-a-reference&quot;&gt;Aligning Events to a Reference&lt;/h2&gt;

&lt;p&gt;The hidden Markov model we designed for the consensus problem had 5-mers of an arbitrary sequence as the backbone of the HMM, with additional states and transitions to handle the skipping/splitting artefacts. In our preprint we used this HMM to calculate a consensus sequence from a set of reads. If we make a reference genome the backbone of the HMM, we can use it to align events to the reference.&lt;/p&gt;

&lt;p&gt;The new &lt;code&gt;eventalign&lt;/code&gt; module of &lt;code&gt;nanopolish&lt;/code&gt; exposes this functionality as a command line tool.  This program takes in a set of nanopore reads aligned in base-space to a reference sequence (or draft genome assembly) and re-aligns the reads in event space.&lt;/p&gt;

&lt;p&gt;The pipeline uses &lt;code&gt;bwa mem&lt;/code&gt; alignments as a guide. We start with a normal bwa workflow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bwa mem -x ont2d -t 8 ecoli_k12.fasta reads.fa | samtools view -Sb - &amp;gt; alignments.bam
samtools sort alignments.bam alignments.sorted
samtools index alignments.sorted.bam
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then realign in event space                                                   using nanopolish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nanopolish eventalign -r reads.fa -b alignments.sorted.bam -g ecoli_k12.fasta &quot;gi|556503834|ref|NC_000913.3|:10000-20000&quot; &amp;gt; eventalign.tsv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;contig                         position  reference_kmer  read_index  strand  event_index  event_level_mean  event_length  model_kmer  model_mean  model_stdv
gi|556503834|ref|NC_000913.3|  10000     ATTGC           1           c       27470        50.57             0.022         ATTGC       50.58       1.02
gi|556503834|ref|NC_000913.3|  10001     TTGCG           1           c       27471        52.31             0.023         TTGCG       51.68       0.73
gi|556503834|ref|NC_000913.3|  10001     TTGCG           1           c       27472        53.05             0.056         TTGCG       51.68       0.73
gi|556503834|ref|NC_000913.3|  10001     TTGCG           1           c       27473        54.56             0.011         TTGCG       51.68       0.73
gi|556503834|ref|NC_000913.3|  10002     TGCGC           1           c       27474        65.56             0.012         TGCGC       66.96       2.91
gi|556503834|ref|NC_000913.3|  10002     TGCGC           1           c       27475        69.97             0.071         TGCGC       66.96       2.91
gi|556503834|ref|NC_000913.3|  10003     GCGCT           1           c       27476        67.11             0.017         GCGCT       68.08       2.20
gi|556503834|ref|NC_000913.3|  10004     CGCTG           1           c       27477        69.47             0.052         CGCTG       69.84       1.89
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the complement strand (c) of a 2D Nanopore read from Nick’s &lt;a href=&quot;http://www.gigasciencejournal.com/content/3/1/22&quot;&gt;E. coli data&lt;/a&gt; aligned to E. coli K12. The first event listed (event 27470) had a measured current level of 50.57 pA. It aligns to the reference 5-mer ATTGC at position 10,000 of the reference genome. The pore model indicates that events measured for 5-mer ATTGC should come from &lt;script type=&quot;math/tex&quot;&gt;\mathcal{N}(50.58, 1.02^2)&lt;/script&gt;, which matches the observed data very well. The next 3 events (27471, 27472, 27473) are all aligned to the same reference 5-mer (TTGCG) indicating that the event detector erroneously called 3 events where only one should have been emitted. Note that the current for these 3 events are all plausibly drawn from the expected distribution &lt;script type=&quot;math/tex&quot;&gt;\mathcal{N}(51.68, 0.73^2)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;This output has one row for every event. If a reference 5-mer was skipped, there will be a gap in the output where no signal was observed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gi|556503834|ref|NC_000913.3|   10009   GCACC   1       c       27489   67.52   0.028   GCACC   66.83   2.46
gi|556503834|ref|NC_000913.3|   10011   ACCGC   1       c       27490   65.17   0.012   ACCGC   65.03   1.92
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we did not observe an event for the 5-mer at position 10010.&lt;/p&gt;

&lt;p&gt;This module will hopefully make it easier to work with signal-level nanopore data, and help the development of improved models. The &lt;code&gt;eventalign&lt;/code&gt; module can be found in the latest version of &lt;a href=&quot;https://github.com/jts/nanopolish&quot;&gt;nanopolish&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nanopolish v0.2.0</title>
   <link href="simpsonlab.github.io/2015/03/30/optimizing-hmm/"/>
   <updated>2015-03-30T00:00:00-04:00</updated>
   <id>simpsonlab.github.io/2015/03/30/optimizing-hmm</id>
   <content type="html">&lt;p&gt;This post describes changes I have made to &lt;a href=&quot;https://github.com/jts/nanopolish&quot;&gt;nanopolish&lt;/a&gt;, our HMM-based consensus caller for Oxford Nanopore data. This post can be thought of as a long changelog with background and rationale.&lt;/p&gt;

&lt;h2 id=&quot;background-and-history&quot;&gt;Background and History&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://nickloman.github.io/&quot;&gt;Nick Loman&lt;/a&gt;, Josh Quick and I started working on nanpore assembly at a hackathon at the Newton Institute in Cambridge. Our initial goal was pretty simple; we wanted to see if we could run &lt;a href=&quot;https://github.com/thegenemyers/DALIGNER&quot;&gt;DALIGNER&lt;/a&gt; on nanopore data and devise a way to error correct the reads. After a lot of tinkering and “proper bioinformatics” as Nick put it (converting file formats) we were able to run &lt;a href=&quot;http://sourceforge.net/projects/poamsa/&quot;&gt;poa&lt;/a&gt; on the overlapping reads that DALIGNER found. Taking poa’s consensus sequence as the error corrected read improved identity to around 92-93%. Nick was able to get &lt;a href=&quot;http://wgs-assembler.sourceforge.net/wiki/index.php?title=Main_Page&quot;&gt;Celera Assembler&lt;/a&gt; running on the corrected reads and our assembly became progressively better as Nick and Josh added more data.&lt;/p&gt;

&lt;p&gt;Once Nick got a single-contig assembly out of Celera Assembler we turned our attention to improving the accuracy of the final assembly. The consensus sequence that Celera Assembler called off the corrected reads had accuracy of about 98%. We knew that by working with the base-called reads, rather than the raw signal data emitted by the nanopore, we were losing a lot of information. During the winter holidays I started to write code that would use the raw current signal to call a new consensus. My initial exploratory code was in Python as the &lt;a href=&quot;https://github.com/arq5x/poretools&quot;&gt;poretools&lt;/a&gt; package gave convenient access to the raw signal data encoded in ONT’s FAST5 files. I wrote a quick hidden Markov model in Python to calculate the probability of observing a sequence of nanopore signals given an arbitrary sequence. I immediately realized my Python HMM would be far too slow to run on even a bacterial genome so I decided the core algorithms would have to be written in C or C++.&lt;/p&gt;

&lt;p&gt;I asked on twitter the best way to call out to a C++ library from Python and received many helpful replies (h/t to Titus Brown, Michael Crusoe and others). I settled on using &lt;a href=&quot;https://docs.python.org/2/library/ctypes.html&quot;&gt;ctypes&lt;/a&gt; as this bridge between the Python frontend/poretools and the HMM in C++. I was surprised at how easy ctypes makes this - I had Python talking to a prototype C++ library in under an hour. This hybrid Python/C++ solution was just fast enough to make model development and testing possible. We spent the next month or so revising the probabilistic model of the data, developing algorithms to propose candidate consensus sequences and testing them on our E. coli data. Once the model settled we ran it on the single-contig assembly which took a few days running in parallel on Nick’s server. We wrote up a &lt;a href=&quot;http://biorxiv.org/content/early/2015/03/11/015552&quot;&gt;preprint&lt;/a&gt; describing this work and posted it on BioRxiv.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-design&quot;&gt;Improving the design&lt;/h2&gt;

&lt;p&gt;I was not satisfied with the Python/C++ hybrid design. I am sensitive to installation issues when releasing software as I have found that installing dependencies is a major source of problems for the user (although great projects like &lt;a href=&quot;https://github.com/Homebrew/homebrew-science&quot;&gt;homebrew-science&lt;/a&gt; are helping a lot here). I admire Heng Li’s software where one usually just needs to run &lt;code&gt;git clone&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; to build the program. The initial version of nanopolish was far from this ideal as it depended on eight Python libraries that needed to be installed with &lt;code&gt;pip&lt;/code&gt;. When moving between my local development version and Nick’s server I realized that installing these dependencies often failed. With this in mind I decided to rewrite the Python frontend in C++. To do this, I crucially needed a replacement for poretools which I used to access the raw data. Matei David in my group volunteered to help and wrote an excellent, intuitive C++ &lt;a href=&quot;https://github.com/mateidavid/fast5&quot;&gt;library&lt;/a&gt; for parsing ONT’s FAST5 files.&lt;/p&gt;

&lt;p&gt;There were additional benefits to this rewrite. In the Python version I again used poa to compute an initial multiple alignment and used this to seed the HMM realignment. In the C++ version I discarded this step, removing another dependency, by calculating the initial alignment directly from the BAM file using &lt;a href=&quot;https://github.com/samtools/htslib&quot;&gt;htslib&lt;/a&gt;. This simplification, along with the much faster parsing of the FAST5 files provided by Matei’s library, reduced startup time from a few minutes to a few seconds. This has helped me iterate on the code much faster during development.&lt;/p&gt;

&lt;h2 id=&quot;improving-hmm-efficiency&quot;&gt;Improving HMM efficiency&lt;/h2&gt;

&lt;p&gt;Despite writing the HMM in C++ the first version of nanopolish was very slow. After the Python to C++ rewrite I focused on improving run time. During development I use a lightweight header-only &lt;a href=&quot;https://github.com/jts/sga/blob/master/src/Util/Profiler.h&quot;&gt;profiler&lt;/a&gt; to keep track of where time is being spent in my program. As expected over 90% of the time was spent running the forward algorithm on the hidden Markov model. I used the amazing &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot;&gt;perf&lt;/a&gt; kernel profiler to explore this further. &lt;code&gt;perf&lt;/code&gt; indicated that most time was in the &lt;script type=&quot;math/tex&quot;&gt;\log()&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\exp()&lt;/script&gt; functions. The forward algorithm on HMMs requires summing log-transformed probabilities. The naive way, &lt;script type=&quot;math/tex&quot;&gt;c = \log(\exp(a) + \exp(b))&lt;/script&gt;, requires two calls to &lt;script type=&quot;math/tex&quot;&gt;\exp&lt;/script&gt; and one call to &lt;script type=&quot;math/tex&quot;&gt;\log&lt;/script&gt; for every state/emission pair in the HMM. This is very slow and the subject of an entire section in the classic Biological Sequence Analysis text. I remembered reading Sean Eddy’s &lt;a href=&quot;http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002195&quot;&gt;paper&lt;/a&gt; on accelerating HMMER3. In this paper Sean describes how the calculation can be improved by using the transformation &lt;script type=&quot;math/tex&quot;&gt;c = a + \log(1 + \exp(b - a))&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;a \geq b&lt;/script&gt;. On the surface this would only save a single call to &lt;script type=&quot;math/tex&quot;&gt;\exp&lt;/script&gt; but Sean goes further by using a table indexed by &lt;script type=&quot;math/tex&quot;&gt;b - a&lt;/script&gt; to cache &lt;script type=&quot;math/tex&quot;&gt;\log(1 + \exp(b - a))&lt;/script&gt;. This method completely removes the &lt;script type=&quot;math/tex&quot;&gt;\exp&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\log&lt;/script&gt; calls in the inner loop of our HMM. After plugging Sean’s implementation into nanopolish we immediately had an 8-fold improvement in speed. Thanks to Sean for allowing us to use this as public domain code.&lt;/p&gt;

&lt;h2 id=&quot;improving-memory-layout&quot;&gt;Improving memory layout&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;perf&lt;/code&gt; output also indicated that a lot of CPU time was wasted waiting on memory access. To improve cache usage and reduce the amount of data that is transferred over the memory bus, I reduced the precision of the floating point values from 64 bits to 32 bits. At the same time, I changed the memory layout of the nanopore event signals so that data accessed together was located in contiguous memory locations. This change simply interleaved two arrays, one storing event currents and one storing event durations, into a single array of structs. Finally, I pre-computed all of the scalings and transformations that need to be applied to the nanopore events (for example the current signal drifts over time and this needs to be corrected for) to reduce the work in the inner loop of the HMM.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This collection of changes reduced the average time spent in the forward algorithm of the HMM from &lt;script type=&quot;math/tex&quot;&gt;3,000 {\mu}s&lt;/script&gt; per call to &lt;script type=&quot;math/tex&quot;&gt;278 \mu s&lt;/script&gt; per call for 100 input events and a 100bp sequence, an improvment of over 10x. This did not require any changes at the algorithm level, only minor code optimizations. My next goal is to make algorithmic improvements, primarily avoiding testing unlikely candidate sequences in the HMM. Version 0.2.0 of nanopolish is &lt;a href=&quot;https://github.com/jts/nanopolish&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
